{"ast":null,"code":"//I was sent this code by jackson#0001 idk if its his but sure aint mine. \nlet currId = 0,\n    obfuscators = {},\n    alreadyParsed = [],\n    styleMap = {\n  '§0': 'color:#000000',\n  '§1': 'color:#0000AA',\n  '§2': 'color:#00AA00',\n  '§3': 'color:#00AAAA',\n  '§4': 'color:#AA0000',\n  '§5': 'color:#AA00AA',\n  '§6': 'color:#FFAA00',\n  '§7': 'color:#999999',\n  '§8': 'color:#3f3f3f',\n  '§9': 'color:#5555FF',\n  '§a': 'color:#55FF55',\n  '§b': 'color:#55FFFF',\n  '§c': 'color:#FF5555',\n  '§d': 'color:#FF55FF',\n  '§e': 'color:#FFFF55',\n  '§f': 'color:#FFFFFF',\n  '§l': 'font-weight:bold',\n  '§m': 'text-decoration:line-through',\n  '§n': 'text-decoration:underline',\n  '§o': 'font-style:italic'\n};\n\nconst obfuscate = (elem, string) => {\n  let multiMagic, currNode, listLen, nodeI;\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  const replaceRand = (string, i) => {\n    var randChar = String.fromCharCode(randInt(64, 95));\n    return string.substr(0, i) + randChar + string.substr(i + 1, string.length);\n  };\n\n  const initMagic = (el, str) => {\n    var i = 0,\n        obsStr = str || el.innerHTML,\n        strLen = obsStr.length;\n    if (!strLen) return;\n    obfuscators[currId].push(window.setInterval(function () {\n      if (i >= strLen) i = 0;\n      obsStr = replaceRand(obsStr, i);\n      el.innerHTML = obsStr;\n      i++;\n    }, 0));\n  };\n\n  if (string.indexOf('<br>') > -1) {\n    elem.innerHTML = string;\n    listLen = elem.childNodes.length;\n\n    for (nodeI = 0; nodeI < listLen; nodeI++) {\n      currNode = elem.childNodes[nodeI];\n\n      if (currNode.nodeType === 3) {\n        multiMagic = document.createElement('span');\n        multiMagic.innerHTML = currNode.nodeValue;\n        elem.replaceChild(multiMagic, currNode);\n        initMagic(multiMagic);\n      }\n    }\n  } else {\n    initMagic(elem, string);\n  }\n};\n\nconst applyCode = (string, codes) => {\n  var elem = document.createElement('span'),\n      obfuscated = false; //string = string.replace(/\\x00/g, '');\n\n  codes.forEach(function (code) {\n    elem.style.cssText += styleMap[code] + ';';\n\n    if (code === '§k') {\n      obfuscate(elem, string);\n      obfuscated = true;\n    }\n  });\n  if (!obfuscated) elem.innerHTML = string;\n  return elem;\n};\n\nconst parseStyle = string => {\n  var finalPre = document.createElement('pre'),\n      codes = string.match(/§.{1}/g) || [],\n      codesLen = codes.length,\n      indexes = [],\n      indexDelta,\n      apply = [],\n      strSlice,\n      i;\n  if (!obfuscators[currId]) obfuscators[currId] = [];\n  string = string.replace(/\\n|\\\\n/g, '<br>');\n\n  for (i = 0; i < codesLen; i++) {\n    indexes.push(string.indexOf(codes[i]));\n    string = string.replace(codes[i], '\\x00\\x00');\n  }\n\n  if (indexes[0] !== 0) {\n    finalPre.appendChild(applyCode(string.substring(0, indexes[0]), []));\n  }\n\n  for (i = 0; i < codesLen; i++) {\n    indexDelta = indexes[i + 1] - indexes[i];\n\n    if (indexDelta === 2) {\n      while (indexDelta === 2) {\n        apply.push(codes[i]);\n        i++;\n        indexDelta = indexes[i + 1] - indexes[i];\n      }\n\n      apply.push(codes[i]);\n    } else {\n      apply.push(codes[i]);\n    }\n\n    if (apply.lastIndexOf('§r') > -1) {\n      apply = apply.slice(apply.lastIndexOf('§r') + 1);\n    }\n\n    strSlice = string.substring(indexes[i], indexes[i + 1]);\n    finalPre.appendChild(applyCode(strSlice, apply));\n  }\n\n  return finalPre;\n};\n\nconst clearObfuscators = id => {\n  obfuscators[id].forEach(interval => {\n    clearInterval(interval);\n  });\n  alreadyParsed[id] = [];\n  obfuscators[id] = [];\n};\n\nconst mineParse = input => {\n  var parsed,\n      i = currId;\n\n  if (i > 0) {\n    while (i--) {\n      if (alreadyParsed[i].nodeType) {\n        if (!document.contains(alreadyParsed[i])) {\n          clearObfuscators(i);\n        }\n      }\n    }\n  }\n\n  parsed = parseStyle(input);\n  alreadyParsed.push(parsed);\n  currId++;\n  return {\n    parsed: parsed,\n    raw: parsed.innerHTML\n  };\n};\n\nmodule.exports = mineParse;","map":{"version":3,"sources":["/home/mcpqndq/repos/PitPandaProduction/frontEnd/src/scripts/colorCodes.js"],"names":["currId","obfuscators","alreadyParsed","styleMap","obfuscate","elem","string","multiMagic","currNode","listLen","nodeI","randInt","min","max","Math","floor","random","replaceRand","i","randChar","String","fromCharCode","substr","length","initMagic","el","str","obsStr","innerHTML","strLen","push","window","setInterval","indexOf","childNodes","nodeType","document","createElement","nodeValue","replaceChild","applyCode","codes","obfuscated","forEach","code","style","cssText","parseStyle","finalPre","match","codesLen","indexes","indexDelta","apply","strSlice","replace","appendChild","substring","lastIndexOf","slice","clearObfuscators","id","interval","clearInterval","mineParse","input","parsed","contains","raw","module","exports"],"mappings":"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","sourcesContent":["//I was sent this code by jackson#0001 idk if its his but sure aint mine. \nlet currId = 0,\n    obfuscators = {},\n    alreadyParsed = [],\n    styleMap = {\n        '§0': 'color:#000000',\n        '§1': 'color:#0000AA',\n        '§2': 'color:#00AA00',\n        '§3': 'color:#00AAAA',\n        '§4': 'color:#AA0000',\n        '§5': 'color:#AA00AA',\n        '§6': 'color:#FFAA00',\n        '§7': 'color:#999999',\n        '§8': 'color:#3f3f3f',\n        '§9': 'color:#5555FF',\n        '§a': 'color:#55FF55',\n        '§b': 'color:#55FFFF',\n        '§c': 'color:#FF5555',\n        '§d': 'color:#FF55FF',\n        '§e': 'color:#FFFF55',\n        '§f': 'color:#FFFFFF',\n        '§l': 'font-weight:bold',\n        '§m': 'text-decoration:line-through',\n        '§n': 'text-decoration:underline',\n        '§o': 'font-style:italic'\n    };\n\nconst obfuscate = (elem, string) => {\n    let multiMagic,\n        currNode,\n        listLen,\n        nodeI;\n\n    const randInt = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    const replaceRand = (string, i) => {\n        var randChar = String.fromCharCode(randInt(64, 95));\n        return string.substr(0, i) + randChar + string.substr(i + 1, string.length);\n    }\n\n    const initMagic = (el, str) => {\n        var i = 0,\n            obsStr = str || el.innerHTML,\n            strLen = obsStr.length;\n        if (!strLen) return;\n        obfuscators[currId].push(\n            window.setInterval(function () {\n                if (i >= strLen) i = 0;\n                obsStr = replaceRand(obsStr, i);\n                el.innerHTML = obsStr;\n                i++;\n            }, 0)\n        );\n    }\n\n    if (string.indexOf('<br>') > -1) {\n        elem.innerHTML = string;\n        listLen = elem.childNodes.length;\n        for (nodeI = 0; nodeI < listLen; nodeI++) {\n            currNode = elem.childNodes[nodeI];\n            if (currNode.nodeType === 3) {\n                multiMagic = document.createElement('span');\n                multiMagic.innerHTML = currNode.nodeValue;\n                elem.replaceChild(multiMagic, currNode);\n                initMagic(multiMagic);\n            }\n        }\n    } else {\n        initMagic(elem, string);\n    }\n}\n\nconst applyCode = (string, codes) => {\n    var elem = document.createElement('span'),\n        obfuscated = false;\n\n    //string = string.replace(/\\x00/g, '');\n\n    codes.forEach(function (code) {\n        elem.style.cssText += styleMap[code] + ';';\n        if (code === '§k') {\n            obfuscate(elem, string);\n            obfuscated = true;\n        }\n    });\n\n    if (!obfuscated) elem.innerHTML = string;\n\n    return elem;\n}\n\nconst parseStyle = (string) => {\n    var finalPre = document.createElement('pre'),\n        codes = string.match(/§.{1}/g) || [],\n        codesLen = codes.length,\n        indexes = [],\n        indexDelta,\n        apply = [],\n        strSlice,\n        i;\n\n    if (!obfuscators[currId]) obfuscators[currId] = [];\n\n    string = string.replace(/\\n|\\\\n/g, '<br>');\n\n    for (i = 0; i < codesLen; i++) {\n        indexes.push(string.indexOf(codes[i]));\n        string = string.replace(codes[i], '\\x00\\x00');\n    }\n\n    if (indexes[0] !== 0) {\n        finalPre.appendChild(applyCode(string.substring(0, indexes[0]), []));\n    }\n\n    for (i = 0; i < codesLen; i++) {\n        indexDelta = indexes[i + 1] - indexes[i];\n        if (indexDelta === 2) {\n            while (indexDelta === 2) {\n                apply.push(codes[i]);\n                i++;\n                indexDelta = indexes[i + 1] - indexes[i];\n            }\n            apply.push(codes[i]);\n        } else {\n            apply.push(codes[i]);\n        }\n        if (apply.lastIndexOf('§r') > -1) {\n            apply = apply.slice(apply.lastIndexOf('§r') + 1);\n        }\n        strSlice = string.substring(indexes[i], indexes[i + 1]);\n        finalPre.appendChild(applyCode(strSlice, apply));\n    }\n\n    return finalPre;\n}\n\nconst clearObfuscators = (id) => {\n    obfuscators[id].forEach((interval) => {\n        clearInterval(interval);\n    });\n    alreadyParsed[id] = [];\n    obfuscators[id] = [];\n}\n\nconst mineParse = (input) => {\n    var parsed,\n        i = currId;\n    if (i > 0) {\n        while (i--) {\n            if (alreadyParsed[i].nodeType) {\n                if (!document.contains(alreadyParsed[i])) {\n                    clearObfuscators(i);\n                }\n            }\n        }\n    }\n    parsed = parseStyle(input);\n    alreadyParsed.push(parsed);\n    currId++;\n    return {\n        parsed: parsed,\n        raw: parsed.innerHTML\n    };\n};\n\nmodule.exports = mineParse; "]},"metadata":{},"sourceType":"module"}