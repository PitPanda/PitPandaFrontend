{"ast":null,"code":"import { minutesToString } from './frontendTools';\nimport pitMaster from '../pitMaster.json';\n\nfunction toString(n) {\n  return toFixed(0)(n);\n}\n\nfunction toFixed(places) {\n  return n => {\n    if (typeof n === 'number') return n.toLocaleString('en-US', {\n      minimumFractionDigits: places,\n      maximumFractionDigits: places\n    });else return n + '';\n  };\n}\n\nfunction toPercent(num) {\n  return toFixed(1)(num * 100) + '%';\n}\n\nconst methods = {\n  ownKeys(hidden) {\n    let entries = Object.entries(this);\n    if (!hidden) entries = entries.filter(([, {\n      hidden\n    }]) => !hidden);\n    return entries.sort((a, b) => a[1].short < b[1].short ? -1 : 1).map(e => e[0]);\n  }\n\n};\nconst funBigMap = {\n  toString,\n  toFixed: toFixed(2),\n  minutesToString,\n  toPercent\n};\nconst boards = new Proxy(pitMaster.Extra.Leaderboards, {\n  get: (target, prop) => {\n    if (prop in methods) return methods[prop].bind(target);\n    if (!(prop in target)) prop = 'error';\n    return new Proxy(target[prop], {\n      get: (subTarget, subProp) => {\n        if (subProp === \"transform\") return funBigMap[subTarget[subProp]] || funBigMap[target.default[subProp]];\n        if (subProp in subTarget) return subTarget[subProp];else return target.default[subProp];\n      }\n    });\n  }\n});\nexport default boards;","map":{"version":3,"sources":["/home/mcpqndq/repos/PitPandaProduction/frontEnd/src/scripts/leaderboards.js"],"names":["minutesToString","pitMaster","toString","n","toFixed","places","toLocaleString","minimumFractionDigits","maximumFractionDigits","toPercent","num","methods","ownKeys","hidden","entries","Object","filter","sort","a","b","short","map","e","funBigMap","boards","Proxy","Extra","Leaderboards","get","target","prop","bind","subTarget","subProp","default"],"mappings":"AAAA,SAASA,eAAT,QAAgC,iBAAhC;AACA,OAAOC,SAAP,MAAsB,mBAAtB;;AAEA,SAASC,QAAT,CAAkBC,CAAlB,EAAqB;AACjB,SAAOC,OAAO,CAAC,CAAD,CAAP,CAAWD,CAAX,CAAP;AACH;;AAED,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;AACrB,SAAQF,CAAD,IAAO;AACV,QAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B,OAAOA,CAAC,CAACG,cAAF,CAAiB,OAAjB,EAA0B;AACxDC,MAAAA,qBAAqB,EAAEF,MADiC;AAExDG,MAAAA,qBAAqB,EAAEH;AAFiC,KAA1B,CAAP,CAA3B,KAIK,OAAOF,CAAC,GAAG,EAAX;AACR,GAND;AAOH;;AAED,SAASM,SAAT,CAAmBC,GAAnB,EAAwB;AACpB,SAAON,OAAO,CAAC,CAAD,CAAP,CAAWM,GAAG,GAAG,GAAjB,IAAwB,GAA/B;AACH;;AAGD,MAAMC,OAAO,GAAG;AACZC,EAAAA,OAAO,CAACC,MAAD,EAAS;AACZ,QAAIC,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAe,IAAf,CAAd;AACA,QAAI,CAACD,MAAL,EAAaC,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAe,CAAC,GAAG;AAAEH,MAAAA;AAAF,KAAH,CAAD,KAAoB,CAACA,MAApC,CAAV;AACb,WAAOC,OAAO,CAACG,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,CAAKE,KAAL,GAAaD,CAAC,CAAC,CAAD,CAAD,CAAKC,KAAlB,GAA0B,CAAC,CAA3B,GAA+B,CAAtD,EAAyDC,GAAzD,CAA6DC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAnE,CAAP;AACH;;AALW,CAAhB;AAQA,MAAMC,SAAS,GAAG;AACdrB,EAAAA,QADc;AAEdE,EAAAA,OAAO,EAACA,OAAO,CAAC,CAAD,CAFD;AAGdJ,EAAAA,eAHc;AAIdS,EAAAA;AAJc,CAAlB;AAOA,MAAMe,MAAM,GAAG,IAAIC,KAAJ,CAAWxB,SAAS,CAACyB,KAAV,CAAgBC,YAA3B,EAAyC;AACpDC,EAAAA,GAAG,EAAE,CAACC,MAAD,EAASC,IAAT,KAAkB;AACnB,QAAIA,IAAI,IAAInB,OAAZ,EAAqB,OAAOA,OAAO,CAACmB,IAAD,CAAP,CAAcC,IAAd,CAAmBF,MAAnB,CAAP;AACrB,QAAI,EAAEC,IAAI,IAAID,MAAV,CAAJ,EAAuBC,IAAI,GAAG,OAAP;AACvB,WAAO,IAAIL,KAAJ,CAAUI,MAAM,CAACC,IAAD,CAAhB,EAAwB;AAC3BF,MAAAA,GAAG,EAAE,CAACI,SAAD,EAAYC,OAAZ,KAAwB;AACzB,YAAIA,OAAO,KAAK,WAAhB,EAA6B,OAAOV,SAAS,CAACS,SAAS,CAACC,OAAD,CAAV,CAAT,IAAiCV,SAAS,CAACM,MAAM,CAACK,OAAP,CAAeD,OAAf,CAAD,CAAjD;AAC7B,YAAIA,OAAO,IAAID,SAAf,EAA0B,OAAOA,SAAS,CAACC,OAAD,CAAhB,CAA1B,KACK,OAAOJ,MAAM,CAACK,OAAP,CAAeD,OAAf,CAAP;AACR;AAL0B,KAAxB,CAAP;AAOH;AAXmD,CAAzC,CAAf;AAcA,eAAeT,MAAf","sourcesContent":["import { minutesToString } from './frontendTools';\r\nimport pitMaster from '../pitMaster.json';\r\n \r\nfunction toString(n) {\r\n    return toFixed(0)(n);\r\n}\r\n\r\nfunction toFixed(places) {\r\n    return (n) => {\r\n        if (typeof n === 'number') return n.toLocaleString('en-US', {\r\n            minimumFractionDigits: places,\r\n            maximumFractionDigits: places,\r\n        });\r\n        else return n + '';\r\n    }\r\n}\r\n\r\nfunction toPercent(num) {\r\n    return toFixed(1)(num * 100) + '%';\r\n}\r\n\r\n\r\nconst methods = {\r\n    ownKeys(hidden) {\r\n        let entries = Object.entries(this)\r\n        if (!hidden) entries = entries.filter(([, { hidden }]) => !hidden)\r\n        return entries.sort((a, b) => a[1].short < b[1].short ? -1 : 1).map(e => e[0]);\r\n    },\r\n};\r\n\r\nconst funBigMap = {\r\n    toString,\r\n    toFixed:toFixed(2),\r\n    minutesToString,\r\n    toPercent\r\n};\r\n\r\nconst boards = new Proxy( pitMaster.Extra.Leaderboards ,{\r\n    get: (target, prop) => {\r\n        if (prop in methods) return methods[prop].bind(target);\r\n        if (!(prop in target)) prop = 'error';\r\n        return new Proxy(target[prop], {\r\n            get: (subTarget, subProp) => {\r\n                if (subProp === \"transform\") return funBigMap[subTarget[subProp]] || funBigMap[target.default[subProp]];\r\n                if (subProp in subTarget) return subTarget[subProp];\r\n                else return target.default[subProp];\r\n            }\r\n        });\r\n    },\r\n});\r\n\r\nexport default boards;"]},"metadata":{},"sourceType":"module"}