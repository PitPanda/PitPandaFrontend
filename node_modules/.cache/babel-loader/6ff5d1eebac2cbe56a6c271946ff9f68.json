{"ast":null,"code":"var _jsxFileName = \"/home/mcpqndq/repos/PitPandaProduction/frontEnd/src/Components/Apps/Leaderboard.js\";\nimport React, { useEffect, useState } from 'react';\nimport queryString from 'query-string';\nimport StaticCard from '../Cards/StaticCard';\nimport MinecraftText from '../Minecraft/MinecraftText';\nimport Link from '../Link/Link';\nimport PageSelector from '../PageSelector/PageSelector';\nimport boards from '../../scripts/leaderboards';\nimport { withRouter } from 'react-router-dom';\nconst defaultCategory = 'gapples';\n\nasync function getLeaderboard({\n  category = defaultCategory,\n  page = 0\n}) {\n  try {\n    const pageRequest = await fetch(`/api/leaderboard/${category}?page=${page}`);\n    const json = await pageRequest.json();\n    console.log(json);\n    if (!json.success) return {\n      error: json.error || 'An error occured'\n    };\n    return json.leaderboard;\n  } catch (e) {\n    return {\n      error: e\n    };\n  }\n}\n\nasync function getIndexerStatus() {\n  try {\n    const response = await fetch('/api/indexer');\n    if (!response.ok) return {\n      error: response.statusText\n    };\n    const data = await response.json();\n    console.log(data);\n    return data.data;\n  } catch (error) {\n    return {\n      error\n    };\n  }\n}\n\nfunction getQuery(search) {\n  let query = queryString.parse(search);\n  return {\n    category: query.category || defaultCategory,\n    page: query.page || 0\n  };\n}\n\nfunction Leaderboard(props) {\n  const [target, setTarget] = useState(getQuery(props.location.search));\n  const [data, setData] = useState({\n    entires: [],\n    loadedType: defaultCategory,\n    loadedPage: 0\n  });\n  const [indexData, setIndexData] = useState({\n    online: false\n  });\n  const [hiddenLBs, setHiddenLBs] = useState(false);\n  useEffect(() => {\n    return props.history.listen(async location => setTarget(getQuery(location.search)));\n  });\n  useEffect(() => {\n    let alive = true;\n    getLeaderboard(target).then(stats => {\n      if (alive) {\n        if (stats.error) setData({\n          entires: [],\n          loadedType: target.category,\n          loadedPage: target.page\n        });else setData({\n          entires: stats,\n          loadedType: target.category,\n          loadedPage: target.page\n        });\n      }\n    }).catch(console.error);\n    getIndexerStatus().then(indexer => {\n      if (alive) {\n        if (indexer.error) console.log(indexer.error);else setIndexData(indexer);\n      }\n    }).catch(console.error);\n    return () => alive = false;\n  }, [target]);\n\n  function linkBuilder(n) {\n    return `/leaderboard?category=${target.category}&page=${n - 1}`;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"page-header\",\n    style: {\n      marginBottom: '100px',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, \"Pit Panda Leade\", /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => setHiddenLBs(!hiddenLBs),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 111\n    }\n  }, \"r\"), \"boards\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'left',\n      width: '1020px',\n      margin: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'inline-block',\n      verticalAlign: 'top',\n      marginRight: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(StaticCard, {\n    title: \"Leaderboard Selector\",\n    style: {\n      width: '350px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }, boards.ownKeys(hiddenLBs).map(key => {\n    const board = boards[key];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: key + target.category,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      href: `/leaderboard?category=${key}&page=0`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(MinecraftText, {\n      raw: (key === target.category ? '§f' : '') + board.short,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 41\n      }\n    })));\n  })), /*#__PURE__*/React.createElement(StaticCard, {\n    title: \"Indexer Status\",\n    style: {\n      width: '350px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(MinecraftText, {\n    className: \"text-title\",\n    raw: 'Status: ' + (indexData.online ? '§2Online' : '§4Offline'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 130\n    }\n  }), indexData.online ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MinecraftText, {\n    raw: `Players Queued: §6${indexData.remaingCount.toLocaleString()}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 119\n    }\n  }), /*#__PURE__*/React.createElement(MinecraftText, {\n    raw: `Daily Players Indexed: §6${indexData.remaingCount.toLocaleString()}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 126\n    }\n  }), /*#__PURE__*/React.createElement(MinecraftText, {\n    raw: `Rate: §6${Math.round(1e5 / indexData.checkTimeout) / 1e2} players/sec`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 124\n    }\n  }), /*#__PURE__*/React.createElement(MinecraftText, {\n    raw: `Daily Queue Time: §6${(() => {\n      console.log(indexData);\n      const seconds = Math.round(indexData.dailyCount * (1e3 / indexData.checkTimeout));\n      return `${Math.floor(seconds / 3600)}h ${Math.floor(seconds % 3600 / 60)}m`;\n    })()}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 43\n    }\n  }), /*#__PURE__*/React.createElement(MinecraftText, {\n    raw: `Remaining Queue Time: §6${(() => {\n      const seconds = Math.round(indexData.remaingCount * (1e3 / indexData.checkTimeout));\n      return `${Math.floor(seconds / 3600)}h ${Math.floor(seconds % 3600 / 60)}m`;\n    })()}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 43\n    }\n  })) : '')), /*#__PURE__*/React.createElement(StaticCard, {\n    title: boards[data.loadedType].displayName,\n    style: {\n      width: '650px',\n      display: 'inline-block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, data.entires.map((user, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: user.uuid,\n    style: {\n      borderTop: index !== 0 ? '2px solid #444' : 'none',\n      padding: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(MinecraftText, {\n    style: {\n      width: '10%',\n      textAlign: 'center',\n      display: 'inline-block'\n    },\n    text: `#${data.loadedPage * 100 + index + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    href: `/players/${user.uuid}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(MinecraftText, {\n    raw: user.name,\n    style: {\n      width: '50%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(MinecraftText, {\n    text: boards[data.loadedType].transform(user.score),\n    style: {\n      width: '40%',\n      textAlign: 'right',\n      paddingRight: '8px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 29\n    }\n  }))), data.entires.length ? /*#__PURE__*/React.createElement(PageSelector, {\n    start: 1,\n    current: Number(target.page) + 1,\n    linkBuilder: linkBuilder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 42\n    }\n  }) : '')));\n}\n\nexport default withRouter(Leaderboard);","map":{"version":3,"sources":["/home/mcpqndq/repos/PitPandaProduction/frontEnd/src/Components/Apps/Leaderboard.js"],"names":["React","useEffect","useState","queryString","StaticCard","MinecraftText","Link","PageSelector","boards","withRouter","defaultCategory","getLeaderboard","category","page","pageRequest","fetch","json","console","log","success","error","leaderboard","e","getIndexerStatus","response","ok","statusText","data","getQuery","search","query","parse","Leaderboard","props","target","setTarget","location","setData","entires","loadedType","loadedPage","indexData","setIndexData","online","hiddenLBs","setHiddenLBs","history","listen","alive","then","stats","catch","indexer","linkBuilder","n","marginBottom","textAlign","width","margin","display","verticalAlign","marginRight","ownKeys","map","key","board","short","remaingCount","toLocaleString","Math","round","checkTimeout","seconds","dailyCount","floor","displayName","user","index","uuid","borderTop","padding","name","transform","score","paddingRight","length","Number"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport queryString from 'query-string';\nimport StaticCard from '../Cards/StaticCard';\nimport MinecraftText from '../Minecraft/MinecraftText';\nimport Link from '../Link/Link';\nimport PageSelector from '../PageSelector/PageSelector';\nimport boards from '../../scripts/leaderboards';\nimport { withRouter } from 'react-router-dom';\n\nconst defaultCategory = 'gapples';\n\nasync function getLeaderboard({ category = defaultCategory, page = 0 }) {\n    try {\n        const pageRequest = await fetch(`/api/leaderboard/${category}?page=${page}`);\n        const json = await pageRequest.json();\n        console.log(json);\n        if (!json.success) return { error: (json.error || 'An error occured') };\n        return json.leaderboard;\n    } catch (e) {\n        return { error: e };\n    }\n}\n\nasync function getIndexerStatus() {\n    try{\n        const response = await fetch('/api/indexer');\n        if (!response.ok) return {error:response.statusText};\n        const data = await response.json();\n        console.log(data);\n        return data.data;\n    }catch(error){\n        return {error};\n    }\n}\n\nfunction getQuery(search) {\n    let query = queryString.parse(search);\n    return { category: query.category || defaultCategory, page: query.page || 0 };\n}\n\nfunction Leaderboard(props) {\n    const [target, setTarget] = useState(getQuery(props.location.search));\n    const [data, setData] = useState({ entires: [], loadedType: defaultCategory, loadedPage: 0 });\n    const [indexData, setIndexData] = useState({ online: false });\n\n    const [hiddenLBs, setHiddenLBs] = useState(false);\n\n\n    useEffect(() => {\n        return props.history.listen(\n            async location => setTarget(getQuery(location.search))\n        );\n    });\n\n    useEffect(() => {\n        let alive = true;\n        getLeaderboard(target).then(stats=>{\n            if(alive){\n                if (stats.error) setData({ entires: [], loadedType: target.category, loadedPage: target.page });\n                else setData({ entires: stats, loadedType: target.category, loadedPage: target.page });\n            }\n        }).catch(console.error);\n        getIndexerStatus().then(indexer=>{\n            if(alive) {\n                if(indexer.error) console.log(indexer.error);\n                else setIndexData(indexer);\n            }\n        }).catch(console.error);\n        return () => alive = false;\n    }, [target]);\n\n    function linkBuilder(n){\n        return `/leaderboard?category=${target.category}&page=${n-1}`;\n    }\n\n    return (\n        <>\n            <h1 className=\"page-header\" style={{ marginBottom: '100px', textAlign: 'center' }}>Pit Panda Leade<span onClick={ () => setHiddenLBs(!hiddenLBs) }>r</span>boards</h1>\n            <div style={{ textAlign: 'left', width: '1020px', margin: 'auto' }}>\n                <div style={{ display: 'inline-block', verticalAlign: 'top', marginRight: '20px' }}>\n                    <StaticCard title=\"Leaderboard Selector\" style={{ width: '350px' }}>\n                        {boards.ownKeys(hiddenLBs).map(key => {\n                            const board = boards[key];\n                            return (\n                                <div key={key+target.category}>\n                                    <Link href={`/leaderboard?category=${key}&page=0`}>\n                                        <MinecraftText raw={(key===target.category?'§f':'')+board.short}/>\n                                    </Link>\n                                </div>\n                            );\n                        })}\n                    </StaticCard>\n                    <StaticCard title=\"Indexer Status\" style={{ width: '350px' }}>\n                        <MinecraftText className='text-title' raw={'Status: ' + (indexData.online ? '§2Online' : '§4Offline')} /><br />\n                        {indexData.online ? (\n                            <>\n                                <MinecraftText raw={`Players Queued: §6${indexData.remaingCount.toLocaleString()}`} /><br />\n                                <MinecraftText raw={`Daily Players Indexed: §6${indexData.remaingCount.toLocaleString()}`} /><br />\n                                <MinecraftText raw={`Rate: §6${Math.round(1e5/indexData.checkTimeout)/1e2} players/sec`} /><br />\n                                <MinecraftText raw={`Daily Queue Time: §6${(()=>{\n                                    console.log(indexData);\n                                    const seconds = Math.round(indexData.dailyCount*(1e3/indexData.checkTimeout));\n                                    return `${Math.floor(seconds/3600)}h ${Math.floor((seconds%3600)/60)}m`;\n                                })()}`} /><br />\n                                <MinecraftText raw={`Remaining Queue Time: §6${(()=>{\n                                    const seconds = Math.round(indexData.remaingCount*(1e3/indexData.checkTimeout));\n                                    return `${Math.floor(seconds/3600)}h ${Math.floor((seconds%3600)/60)}m`;\n                                })()}`} /><br />\n                            </>\n                        ) : ''}\n                    </StaticCard>\n                </div>\n\n                <StaticCard title={boards[data.loadedType].displayName} style={{ width: '650px', display: 'inline-block' }}>\n                    {data.entires.map((user, index) => (\n                        <div key={user.uuid} style={{ borderTop: (index !== 0 ? '2px solid #444' : 'none'), padding: '5px' }}>\n                            <MinecraftText style={{ width: '10%', textAlign: 'center', display: 'inline-block' }} text={`#${data.loadedPage * 100 + index + 1}`} />\n                            <Link href={`/players/${user.uuid}`}>\n                                <MinecraftText raw={user.name} style={{ width: '50%' }} />\n                            </Link>\n                            <MinecraftText text={boards[data.loadedType].transform(user.score)} style={{ width: '40%', textAlign: 'right', paddingRight: '8px' }} />\n                        </div>\n                    ))}\n                    {data.entires.length?<PageSelector start={1} current={Number(target.page)+1} linkBuilder={linkBuilder}/>:''}\n                </StaticCard>\n            </div>\n        </>\n    );\n}\n\nexport default withRouter(Leaderboard);"]},"metadata":{},"sourceType":"module"}