{"ast":null,"code":"var _jsxFileName = \"/home/mcpqndq/repos/PitPandaProduction/frontEnd/src/Components/QueryBox/QueryBox.js\";\nimport React from 'react';\nimport SearchField from '../SearchField/SearchField';\nimport StaticCard from '../Cards/StaticCard';\nimport pitMaster from '../../pitMaster.json';\nimport uuid from 'uuid';\nlet Mystics = pitMaster.Pit.Mystics;\nObject.values(Mystics).forEach(ench => {\n  ench.Classes.forEach(cls => {\n    if (!Mystics[cls]) Mystics[cls] = {\n      Name: `§f${cls.charAt(0).toUpperCase() + cls.slice(1)}`,\n      Type: 'any'\n    };\n  });\n});\nMystics.pants = {\n  Name: '§fPants',\n  Type: 'pants',\n  NoNumber: true\n};\nMystics.sword = {\n  Name: '§fSword',\n  Type: 'sword',\n  NoNumber: true\n};\nMystics.bow = {\n  Name: '§fBow',\n  Type: 'bow',\n  NoNumber: true\n};\nMystics.gemmed = {\n  Name: '§fGemmed',\n  Type: 'any',\n  NoNumber: true\n};\nMystics.lives = {\n  Name: '§fLives',\n  Type: 'any'\n};\nMystics.maxLives = {\n  Name: '§fMax Lives',\n  Type: 'any'\n};\nMystics.tokens = {\n  Name: '§fTokens',\n  Type: 'any'\n};\nMystics.artifact = {\n  Name: '§fArtifact',\n  Type: 'any',\n  NoNumber: true\n};\nMystics.rare = {\n  Name: '§fRare',\n  Type: 'any',\n  NoNumber: true\n};\nMystics.legendary = {\n  Name: '§fLegendary',\n  Type: 'any',\n  NoNumber: true\n};\nMystics.bountiful = {\n  Name: '§fBountiful',\n  Type: 'any',\n  NoNumber: true\n};\nMystics.combolicious = {\n  Name: '§fCombolicious',\n  Type: 'any',\n  NoNumber: true\n};\nMystics.extraordinary = {\n  Name: '§fExtraordinary',\n  Type: 'any',\n  NoNumber: true\n};\nMystics.unthinkable = {\n  Name: '§fUnthinkable',\n  Type: 'any',\n  NoNumber: true\n};\nMystics.overpowered = {\n  Name: '§fOverpowered',\n  Type: 'any',\n  NoNumber: true\n};\nMystics.miraculous = {\n  Name: '§fMiraculous',\n  Type: 'any',\n  NoNumber: true\n};\nMystics.million = {\n  Name: '§fOne in a Million',\n  Type: 'any',\n  NoNumber: true\n};\nMystics.nonce = {\n  Name: '§fNonce',\n  Type: 'any'\n};\nMystics.color = {\n  Name: '§fColor',\n  Type: 'pants',\n  Colors: {\n    red: '0',\n    yellow: '1',\n    blue: '2',\n    orange: '3',\n    green: '4'\n  }\n};\nMystics['color0'] = {\n  Name: '§fRed',\n  Type: 'pants',\n  NoNumber: true\n};\nMystics['color1'] = {\n  Name: '§fYellow',\n  Type: 'pants',\n  NoNumber: true\n};\nMystics['color2'] = {\n  Name: '§fBlue',\n  Type: 'pants',\n  NoNumber: true\n};\nMystics['color3'] = {\n  Name: '§fOrange',\n  Type: 'pants',\n  NoNumber: true\n};\nMystics['color4'] = {\n  Name: '§fGreen',\n  Type: 'pants',\n  NoNumber: true\n};\nconst valid = ['pants', 'sword', 'bow', 'any'];\nconst formatted = Object.entries(Mystics).filter(([, ench]) => valid.includes(ench.Type)).sort(([, a], [, b]) => a.Name.substring(a.Name.indexOf('§9') + 2) < b.Name.substring(b.Name.indexOf('§9') + 2) ? -1 : 1);\n\nfunction createInputData() {\n  return {\n    id: uuid.v4(),\n    ref: React.createRef(),\n    reporting: '',\n    says: ''\n  };\n}\n\nclass QueryBox extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      inputs: [createInputData()],\n      type: '*'\n    };\n    this.buttonRef = React.createRef();\n\n    this.killInput = index => {\n      if (index !== this.state.inputs.length - 1 && index !== 0 || index !== 0 && this.state.inputs[index - 1].report === '') {\n        let inputs = this.state.inputs;\n        inputs[index - 1].ref.current.focus();\n        inputs[index - 1].says += '_';\n        clearTimeout(inputs[index].timeout);\n        inputs = inputs.slice(0, index).concat(inputs.slice(index + 1));\n        this.setState({\n          inputs\n        });\n      }\n    };\n\n    this.timeOutFix = (timeout, index) => {\n      let inputs = this.state.inputs;\n      inputs[index].timeout = timeout;\n      this.setState({\n        inputs\n      });\n    };\n\n    this.monitorInputs = (report, raw, type, index) => {\n      let inputs = this.state.inputs;\n      inputs[index].reporting = report;\n      inputs[index].says = raw;\n      inputs[index].type = type;\n      let foundType;\n\n      for (const input of inputs) {\n        if (input.type && input.type !== 'any') {\n          foundType = input.type;\n          this.setState({\n            type: input.type\n          });\n        }\n      }\n\n      if (!foundType) this.setState({\n        type: '*'\n      });\n\n      if (index + 1 === inputs.length) {\n        inputs.push(createInputData());\n      }\n\n      this.setState({\n        inputs\n      });\n    };\n\n    this.buildAndSendQuery = () => {\n      let inputs = this.state.inputs;\n      let toClear = inputs.filter((input, index) => input.reporting === '' && index !== inputs.length - 1);\n      toClear.forEach(input => clearTimeout(input.timeout));\n      inputs = inputs.filter((input, index) => input.reporting !== '' || index === inputs.length - 1);\n      let queryString = inputs.slice(0, -1).map(i => i.reporting).join();\n      if (this.state.type !== '*') queryString += ',' + this.state.type;\n      this.props.query(queryString);\n      this.setState({\n        inputs\n      });\n    };\n\n    this.focus = index => {\n      if (this.state.inputs[index]) {\n        this.state.inputs[index].ref.current.focus();\n      } else if (index >= this.state.inputs.length) this.buttonRef.current.focus();\n    };\n  }\n\n  render() {\n    let suggestions = formatted;\n    if (this.state.type !== '*') suggestions = suggestions.filter(([, ench]) => ['any', this.state.type].includes(ench.Type));\n    return /*#__PURE__*/React.createElement(StaticCard, {\n      title: \"Query\",\n      style: {\n        width: '350px',\n        display: 'inline-block',\n        verticalAlign: 'top',\n        margin: '20px',\n        textAlign: 'left'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, this.state.inputs.map((input, index) => /*#__PURE__*/React.createElement(SearchField, {\n      up: () => this.focus(index - 1),\n      down: () => this.focus(index + 1),\n      says: input.says,\n      timeOutFix: timeout => this.timeOutFix(timeout, index),\n      kill: e => this.killInput(index),\n      key: input.id,\n      mainRef: input.ref,\n      suggestions: suggestions,\n      report: (a, b, c) => this.monitorInputs(a, b, c, index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.buildAndSendQuery,\n      onKeyDown: e => {\n        if (e.keyCode === 38) this.focus(this.state.inputs.length - 1);\n      },\n      ref: this.buttonRef,\n      className: \"srchBtn\",\n      style: {\n        marginTop: '0px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }, \"Search\"));\n  }\n\n}\n\nexport default QueryBox;","map":{"version":3,"sources":["/home/mcpqndq/repos/PitPandaProduction/frontEnd/src/Components/QueryBox/QueryBox.js"],"names":["React","SearchField","StaticCard","pitMaster","uuid","Mystics","Pit","Object","values","forEach","ench","Classes","cls","Name","charAt","toUpperCase","slice","Type","pants","NoNumber","sword","bow","gemmed","lives","maxLives","tokens","artifact","rare","legendary","bountiful","combolicious","extraordinary","unthinkable","overpowered","miraculous","million","nonce","color","Colors","red","yellow","blue","orange","green","valid","formatted","entries","filter","includes","sort","a","b","substring","indexOf","createInputData","id","v4","ref","createRef","reporting","says","QueryBox","Component","state","inputs","type","buttonRef","killInput","index","length","report","current","focus","clearTimeout","timeout","concat","setState","timeOutFix","monitorInputs","raw","foundType","input","push","buildAndSendQuery","toClear","queryString","map","i","join","props","query","render","suggestions","width","display","verticalAlign","margin","textAlign","e","c","keyCode","marginTop"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SearchField from '../SearchField/SearchField';\nimport StaticCard from '../Cards/StaticCard';\nimport pitMaster from '../../pitMaster.json';\nimport uuid from 'uuid';\n\nlet Mystics = pitMaster.Pit.Mystics;\n\nObject.values(Mystics).forEach(ench=>{\n    ench.Classes.forEach(cls=>{\n        if(!Mystics[cls]) Mystics[cls] = {Name:`§f${cls.charAt(0).toUpperCase() + cls.slice(1)}`,Type:'any'};\n    })\n});\n\nMystics.pants = {Name:'§fPants',Type:'pants',NoNumber:true};\nMystics.sword = {Name:'§fSword',Type:'sword',NoNumber:true};\nMystics.bow = {Name:'§fBow',Type:'bow',NoNumber:true};\nMystics.gemmed = {Name:'§fGemmed',Type:'any',NoNumber:true};\nMystics.lives = {Name:'§fLives',Type:'any'};\nMystics.maxLives = {Name:'§fMax Lives',Type:'any'};\nMystics.tokens = {Name:'§fTokens',Type:'any'};\nMystics.artifact = {Name:'§fArtifact',Type:'any',NoNumber:true};\nMystics.rare = {Name:'§fRare',Type:'any',NoNumber:true};\nMystics.legendary = {Name:'§fLegendary',Type:'any',NoNumber:true};\nMystics.bountiful = {Name:'§fBountiful',Type:'any',NoNumber:true};\nMystics.combolicious = {Name:'§fCombolicious',Type:'any',NoNumber:true};\nMystics.extraordinary = {Name:'§fExtraordinary',Type:'any',NoNumber:true};\nMystics.unthinkable = {Name:'§fUnthinkable',Type:'any',NoNumber:true};\nMystics.overpowered = {Name:'§fOverpowered',Type:'any',NoNumber:true};\nMystics.miraculous = {Name:'§fMiraculous',Type:'any',NoNumber:true};\nMystics.million = {Name:'§fOne in a Million',Type:'any',NoNumber:true};\nMystics.nonce = {Name:'§fNonce',Type:'any'};\nMystics.color = {Name:'§fColor',Type:'pants',Colors:{\n    red:'0',\n    yellow:'1',\n    blue:'2',\n    orange:'3',\n    green:'4'\n}};\nMystics['color0'] = {Name:'§fRed',Type:'pants',NoNumber:true};\nMystics['color1'] = {Name:'§fYellow',Type:'pants',NoNumber:true};\nMystics['color2'] = {Name:'§fBlue',Type:'pants',NoNumber:true};\nMystics['color3'] = {Name:'§fOrange',Type:'pants',NoNumber:true};\nMystics['color4'] = {Name:'§fGreen',Type:'pants',NoNumber:true};\n\nconst valid = ['pants','sword','bow','any'];\nconst formatted = Object.entries(Mystics)\n    .filter(([,ench])=>valid.includes(ench.Type))\n    .sort(([,a],[,b])=>a.Name.substring(a.Name.indexOf('§9')+2)<b.Name.substring(b.Name.indexOf('§9')+2)?-1:1);\n\nfunction createInputData(){\n    return {id:uuid.v4(),ref:React.createRef(),reporting:'',says:''};\n}\n\nclass QueryBox extends React.Component{\n\n    state={\n        inputs:[createInputData()],\n        type:'*'\n    }\n    buttonRef=React.createRef();\n\n    killInput = (index) => {\n        if((index!==this.state.inputs.length-1&&index!==0)||(index!==0&&this.state.inputs[index-1].report==='')){\n            let inputs = this.state.inputs;\n            inputs[index-1].ref.current.focus();\n            inputs[index-1].says+='_';\n            clearTimeout(inputs[index].timeout)\n            inputs = inputs.slice(0,index).concat(inputs.slice(index+1));\n            this.setState({inputs});\n        }\n    }\n\n    timeOutFix = (timeout,index) => {\n        let inputs = this.state.inputs;\n        inputs[index].timeout=timeout;\n        this.setState({inputs});\n    }\n\n    monitorInputs = (report,raw,type,index) => {\n        let inputs = this.state.inputs;\n        inputs[index].reporting=report;\n        inputs[index].says=raw;\n        inputs[index].type=type;\n        let foundType;\n        for(const input of inputs){\n            if(input.type&&input.type!=='any'){\n                foundType=input.type;\n                this.setState({type:input.type})\n            }\n        }\n        if(!foundType) this.setState({type:'*'});\n        if(index+1===inputs.length){\n            inputs.push(createInputData());\n        }\n        this.setState({inputs});\n    }\n\n    buildAndSendQuery = () => {\n        let inputs = this.state.inputs;\n        let toClear = inputs.filter((input,index)=>(input.reporting==='')&&index!==inputs.length-1);\n        toClear.forEach(input=>clearTimeout(input.timeout))\n        inputs = inputs.filter((input,index)=>(input.reporting!=='')||index===inputs.length-1);\n        let queryString = inputs.slice(0,-1).map(i=>i.reporting).join();\n        if(this.state.type!=='*') queryString+=','+this.state.type;\n        this.props.query(queryString);\n        this.setState({inputs});\n    }\n\n    focus = (index) => {\n        if(this.state.inputs[index]){\n            this.state.inputs[index].ref.current.focus();\n        }else if(index>=this.state.inputs.length) this.buttonRef.current.focus();\n    }\n\n    render(){\n        let suggestions = formatted;\n        if(this.state.type!=='*') suggestions = suggestions.filter(([,ench])=>['any',this.state.type].includes(ench.Type));\n        return (\n            <StaticCard title=\"Query\" style={{width:'350px',display:'inline-block',verticalAlign:'top',margin:'20px',textAlign:'left'}}>\n                {this.state.inputs.map((input,index)=>(\n                    <SearchField \n                        up={()=>this.focus(index-1)} \n                        down={()=>this.focus(index+1)} \n                        says={input.says} \n                        timeOutFix={timeout=>this.timeOutFix(timeout,index)} \n                        kill={e=>this.killInput(index)} \n                        key={input.id} \n                        mainRef={input.ref} \n                        suggestions={suggestions} \n                        report={(a,b,c)=>this.monitorInputs(a,b,c,index)}\n                    />\n                ))}\n                <button \n                    onClick={this.buildAndSendQuery} \n                    onKeyDown={e=>{if(e.keyCode===38)this.focus(this.state.inputs.length-1);}} \n                    ref={this.buttonRef} \n                    className='srchBtn' \n                    style={{marginTop:'0px'}}\n                >Search</button>\n            </StaticCard>\n        );\n    }\n}\n\nexport default QueryBox;\n"]},"metadata":{},"sourceType":"module"}